#include "ccConfig.h"
#ifndef __crossapp_h__
#define __crossapp_h__

#include "jsapi.h"
#include "jsfriendapi.h"

extern JSClass  *jsb_CrossApp_CAScheduler_class;
extern JSObject *jsb_CrossApp_CAScheduler_prototype;

bool js_crossapp_CAScheduler_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAScheduler_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAScheduler(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAScheduler_scheduleSelectorUpdate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_setTimeScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleScriptEntry(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleSelectorAllWithMinPriority(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleSelector(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleUpdate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_isTargetPaused(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_resumeTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_performFunctionInUIThread(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_isScheduledSelector(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleSelectorAllForTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleSelectorAll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_scheduleSelector(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_pauseTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_scheduleScriptFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_getTimeScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleAllForTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_destroyScheduler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_unscheduleAll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_getScheduler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScheduler_CAScheduler(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImage_class;
extern JSObject *jsb_CrossApp_CAImage_prototype;

bool js_crossapp_CAImage_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAImage_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAImage(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAImage_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_premultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithETCFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_stringForFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setMaxS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getMaxS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getAspectRatio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_releaseData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_freeName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isTiff(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_bitsPerPixelForFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getGifImageIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setMaxT(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithImageFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getBitPerPixel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getGifImageCounts(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getContentSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getMaxT(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithImageFileThreadSafe(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isPng(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_setAntiAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_generateMipmap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isMonochrome(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_hasAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isEtc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isWebp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_updateGifImageWithIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getImageFileType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_initWithRawData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_repremultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_detectFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_hasMipmaps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isCompressed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getDataLenght(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isJpg(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_isGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_scaleToNewImageWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CC_WHITE_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CC_SHADOW_LEFT_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getFontHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithRawData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_cutStringByWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithImageDataNoCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_cutStringByDSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getStringHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_getStringWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CC_SHADOW_TOP_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_generateMipmapsWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CC_SHADOW_BOTTOM_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithRawDataNoCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CC_SHADOW_RIGHT_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_createWithString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImage_CAImage(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouch_class;
extern JSObject *jsb_CrossApp_CATouch_prototype;

bool js_crossapp_CATouch_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATouch_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATouch(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATouch_getLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getDelta(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getStartLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_isDelta(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_setTouchInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getDeltaFromAToZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_getPreviousLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouch_CATouch(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAEvent_class;
extern JSObject *jsb_CrossApp_CAEvent_prototype;

bool js_crossapp_CAEvent_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAEvent_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAEvent(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAEvent_getEventType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAEvent_setEventType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAEvent_CAEvent(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAResponder_class;
extern JSObject *jsb_CrossApp_CAResponder_prototype;

bool js_crossapp_CAResponder_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAResponder_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAResponder(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAResponder_setReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_getTouches(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_nextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setMultipleTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_getScrollRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_setTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_isMultipleTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_getZLevel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAResponder_CAResponder(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAView_class;
extern JSObject *jsb_CrossApp_CAView_prototype;

bool js_crossapp_CAView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAView_removeFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledTopShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_sortAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getCGNode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_updateDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setCGNode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isFlipX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isFlipY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setRotation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getWorldToViewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setScaleY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setScaleX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getAtlasIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSuperviewToViewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToWorldTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setRotationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setSkewX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setSkewY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToSuperviewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_reViewlayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_removeSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledLeftShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getImageRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledBottomShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToWorldAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getLayoutType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setGLServerState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isImageRectRotated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_updateTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getAnchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getWorldToViewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setAtlasIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getCenterOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getRotation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviewsCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_transform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setVertexZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSkewX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSkewY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setBounds(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setRotationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setAdditionalTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFlipY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFlipX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getRotationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setViewToSuperviewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getRotationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getQuad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_reorderSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getVertexZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView__setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isDisplayRange(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getViewToSuperviewAffineTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getScaleY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getScaleX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_addSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setDisplayRange(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_transformAncestors(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_isVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getSuperviewToViewTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getBounds(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_enabledRightShadow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_initWithColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_setTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_getGLServerState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAView_CAView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImageView_class;
extern JSObject *jsb_CrossApp_CAImageView_prototype;

bool js_crossapp_CAImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAImageView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAImageView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAImageView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setAnimationImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setImageAsyncWithFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getImageViewScaleType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setImageViewScaleType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getAnimationImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setImageRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAImageView_CAImageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScale9ImageView_class;
extern JSObject *jsb_CrossApp_CAScale9ImageView_prototype;

bool js_crossapp_CAScale9ImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAScale9ImageView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAScale9ImageView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAScale9ImageView_setInsetBottom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getOriginalSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetTop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setInsetLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setCapInsets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getCapInsets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setInsetTop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetBottom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_setInsetRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_getInsetRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScale9ImageView_CAScale9ImageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewAnimationModule_class;
extern JSObject *jsb_CrossApp_CAViewAnimationModule_prototype;

bool js_crossapp_CAViewAnimationModule_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAViewAnimationModule_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAViewAnimationModule(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAViewAnimationModule_setAlreadyRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimationModule_isAlreadyRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimationModule_CAViewAnimationModule(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewAnimation_class;
extern JSObject *jsb_CrossApp_CAViewAnimation_prototype;

bool js_crossapp_CAViewAnimation_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAViewAnimation_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAViewAnimation(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAViewAnimation_setAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_beginAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_areBeginAnimationsWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationDelay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_areAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_removeAnimationsWithView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_removeAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_commitAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationRepeatAutoreverses(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationCurve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_areBeginAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewAnimation_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAControl_class;
extern JSObject *jsb_CrossApp_CAControl_prototype;

bool js_crossapp_CAControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAControl_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAControl(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAControl_setControlStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlStateHighlighted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_getControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlStateLocked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_getControlStateLocked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_setControlStateDisabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAControl_CAControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouchView_class;
extern JSObject *jsb_CrossApp_CATouchView_prototype;

bool js_crossapp_CATouchView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATouchView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATouchView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATouchView_ccTouchPress(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAFont_class;
extern JSObject *jsb_CrossApp_CAFont_prototype;

bool js_crossapp_CAFont_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAFont_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAFont(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAFont_CAFont(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CALabel_class;
extern JSObject *jsb_CrossApp_CALabel_prototype;

bool js_crossapp_CALabel_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CALabel_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CALabel(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CALabel_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setDimensions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_isBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setUnderLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_isDeleteLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_isItalics(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setLineSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_isUnderLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_sizeToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getEnableCopy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getLineSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setItalics(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setWordWrap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getDimensions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_isWordWrap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setDeleteLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_unsizeToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setEnableCopy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_getTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_setFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CALabel_CALabel(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAApplication_class;
extern JSObject *jsb_CrossApp_CAApplication_prototype;

bool js_crossapp_CAApplication_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAApplication_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAApplication(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAApplication_setDefaultValues(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getStatusBarOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getDeltaTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setGLDefaultValues(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setAlphaBlending(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_updateDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getWinSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_end(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_runWindow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getNotificationView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getVisibleOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_mainLoop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isDrawing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setDepthTest(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getSecondsPerFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_reshapeProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getAdaptationRatio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getOpenGLView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setViewport(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_resume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isStatusBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setOpenGLView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_startAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getTotalFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_pause(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_drawScene(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isDisplayStats(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getZEye(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getVisibleSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setNotificationView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getRootWindow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_isPaused(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getCurrentNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_setDisplayStats(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAApplication_getApplication(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAThread_class;
extern JSObject *jsb_CrossApp_CAThread_prototype;

bool js_crossapp_CAThread_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAThread_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAThread(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAThread_setMaxMsgCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_closeAtOnce(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_isRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_OnRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_OnExitInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_start(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_OnInitInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_close(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_notifyRun(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAThread_CAThread(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAButton_class;
extern JSObject *jsb_CrossApp_CAButton_prototype;

bool js_crossapp_CAButton_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAButton_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAButton(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAButton_setImageSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setBackgroundViewForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_isSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setImageColorForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_getImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleColorForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_getBackgroundViewForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_interruptTouchState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setTitleBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setImageOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_getTitleForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAButton_CAButton(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASegmentedControl_class;
extern JSObject *jsb_CrossApp_CASegmentedControl_prototype;

bool js_crossapp_CASegmentedControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CASegmentedControl_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CASegmentedControl(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CASegmentedControl_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setSegmentItemBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getNumberOfSegments(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageSizeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_isEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_getImageColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_setEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASegmentedControl_CASegmentedControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABarItem_class;
extern JSObject *jsb_CrossApp_CABarItem_prototype;

bool js_crossapp_CABarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CABarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CABarItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CABarItem_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarItem_CABarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABarButtonItem_class;
extern JSObject *jsb_CrossApp_CABarButtonItem_prototype;

bool js_crossapp_CABarButtonItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CABarButtonItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CABarButtonItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CABarButtonItem_getCustomView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_initWithCustomView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setItemWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_setHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_initWithTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_getItemWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CABarButtonItem_CABarButtonItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationBarItem_class;
extern JSObject *jsb_CrossApp_CANavigationBarItem_prototype;

bool js_crossapp_CANavigationBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CANavigationBarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CANavigationBarItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CANavigationBarItem_addLeftButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getRightButtonItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_addRightButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getTitleView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setTitleView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_getLeftButtonItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_setTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_isNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_isShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBarItem_CANavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBarItem_class;
extern JSObject *jsb_CrossApp_CATabBarItem_prototype;

bool js_crossapp_CATabBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATabBarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATabBarItem(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATabBarItem_getBadgeValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_setSelectedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_getSelectedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_setBadgeValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarItem_CATabBarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationBar_class;
extern JSObject *jsb_CrossApp_CANavigationBar_prototype;

bool js_crossapp_CANavigationBar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CANavigationBar_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CANavigationBar(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CANavigationBar_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_getButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationBar_CANavigationBar(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBar_class;
extern JSObject *jsb_CrossApp_CATabBar_prototype;

bool js_crossapp_CATabBar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATabBar_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATabBar(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATabBar_setSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getItemSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_replaceItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getContentViewFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_showSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_addForbidSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_setTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_getSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBar_CATabBar(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CARenderImage_class;
extern JSObject *jsb_CrossApp_CARenderImage_prototype;

bool js_crossapp_CARenderImage_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CARenderImage_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CARenderImage(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CARenderImage_listenToForeground(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setImageView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_initWithWidthAndHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_isAutoDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getImageView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setAutoDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_listenToBackground(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_getClearFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_setClearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARenderImage_CARenderImage(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAProgress_class;
extern JSObject *jsb_CrossApp_CAProgress_prototype;

bool js_crossapp_CAProgress_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAProgress_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAProgress(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAProgress_setProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_getProgress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_setProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAProgress_CAProgress(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASwitch_class;
extern JSObject *jsb_CrossApp_CASwitch_prototype;

bool js_crossapp_CASwitch_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CASwitch_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CASwitch(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CASwitch_getOnImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setOffImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setIsOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_isOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setOnImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_getOffImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASwitch_CASwitch(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASlider_class;
extern JSObject *jsb_CrossApp_CASlider_prototype;

bool js_crossapp_CASlider_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CASlider_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CASlider(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CASlider_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getTrackHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_layoutSubViews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setTrackHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_getMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_setMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CASlider_CASlider(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPageControl_class;
extern JSObject *jsb_CrossApp_CAPageControl_prototype;

bool js_crossapp_CAPageControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPageControl_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPageControl(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPageControl_setDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_isSinglePage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setSinglePage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_isDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setCurrentPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_updateCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getCurrentPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_setCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_getCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageControl_CAPageControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAStepper_class;
extern JSObject *jsb_CrossApp_CAStepper_prototype;

bool js_crossapp_CAStepper_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAStepper_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAStepper(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAStepper_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getBackgroundImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setWraps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getContinuous(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setContinuous(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getIncrementImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setDividerColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getDecrementImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setDecrementImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getWraps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setStepValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_removeAllTargets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getDividerColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setTouchEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setIncrementImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getStepValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_getTouchEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAStepper_CAStepper(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAActivityIndicatorView_class;
extern JSObject *jsb_CrossApp_CAActivityIndicatorView_prototype;

bool js_crossapp_CAActivityIndicatorView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAActivityIndicatorView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAActivityIndicatorView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAActivityIndicatorView_setCycleTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getActivityBackView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setTimesOneCycle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setActivityBackView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_setActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_getLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAActivityIndicatorView_CAActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPullToRefreshView_class;
extern JSObject *jsb_CrossApp_CAPullToRefreshView_prototype;

bool js_crossapp_CAPullToRefreshView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPullToRefreshView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPullToRefreshView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPullToRefreshView_getLoadingView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getRefreshingText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setLoadingView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setRefreshingText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getLabelColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getPullToImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setLayoutLinearType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setLabelColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getLayoutLinearType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_setPullToImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_getPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPullToRefreshView_CAPullToRefreshView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScrollView_class;
extern JSObject *jsb_CrossApp_CAScrollView_prototype;

bool js_crossapp_CAScrollView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAScrollView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAScrollView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAScrollView_setBounceVertical(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isTracking(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_startDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isBounceVertical(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isDecelerating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_endFooterRefresh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_addSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setContentOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_startPullToHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getScrollViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setBounces(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getContentOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setViewSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isBounces(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getViewSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isZooming(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_stopDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_endHeaderRefresh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_getMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_setMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAScrollView_CAScrollView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CAPageView_class;
extern JSObject *jsb_CAPageView_prototype;

bool js_crossapp_CAPageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPageView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPageView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPageView_setSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_setViews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getCurrPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getPageViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getPageCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_setCurrPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_getSubViewAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPageView_CAPageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewController_class;
extern JSObject *jsb_CrossApp_CAViewController_prototype;

bool js_crossapp_CAViewController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAViewController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAViewController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAViewController_getView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getTabBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_keyBackClicked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setTabBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_isKeypadEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_isViewRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidLoad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_removeViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidDisappear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getNibName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_nextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidAppear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_addViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewSizeDidChanged(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getNavigationController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_getTabBarController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_viewDidUnload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_setKeypadEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_keyMenuClicked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAViewController_CAViewController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationController_class;
extern JSObject *jsb_CrossApp_CANavigationController_prototype;

bool js_crossapp_CANavigationController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CANavigationController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CANavigationController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CANavigationController_setNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_updateItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getBackViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getViewControllerCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_replaceViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popToRootViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_pushViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_initWithRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_isNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_setNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popFirstViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_popViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CANavigationController_CANavigationController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBarController_class;
extern JSObject *jsb_CrossApp_CATabBarController_prototype;

bool js_crossapp_CATabBarController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATabBarController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATabBarController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATabBarController_getSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_showSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_updateItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_showSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarVerticalAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarTitleBoldForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_showTabBarSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_initWithViewControllers(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_setTabBarSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_isTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATabBarController_CATabBarController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADrawerController_class;
extern JSObject *jsb_CrossApp_CADrawerController_prototype;

bool js_crossapp_CADrawerController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADrawerController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADrawerController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADrawerController_hideLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_showLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_getEffect3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_getRightViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isShowLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_initWithController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_setEffect3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_replaceRightViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_getLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawerController_CADrawerController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouchController_class;
extern JSObject *jsb_CrossApp_CATouchController_prototype;

bool js_crossapp_CATouchController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATouchController_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATouchController(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATouchController_touchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_setEvent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_getEvent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_getTouch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_touchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_touchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_getTouchID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_setTouch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_touchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATouchController_CATouchController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAGif_class;
extern JSObject *jsb_CrossApp_CAGif_prototype;

bool js_crossapp_CAGif_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAGif_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAGif(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAGif_getDelay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_getImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_initWithFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_initWithData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_createWithData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGif_CAGif(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWindow_class;
extern JSObject *jsb_CrossApp_CAWindow_prototype;

bool js_crossapp_CAWindow_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWindow_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWindow(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWindow_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_setRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_getRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_getModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWindow_CAWindow(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAGifView_class;
extern JSObject *jsb_CrossApp_CAGifView_prototype;

bool js_crossapp_CAGifView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAGifView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAGifView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAGifView_setTimes(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_initWithGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_setGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_getGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_isRepeatForever(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_setRepeatForever(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAGifView_CAGifView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CARichLabel_class;
extern JSObject *jsb_CrossApp_CARichLabel_prototype;

bool js_crossapp_CARichLabel_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CARichLabel_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CARichLabel(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CARichLabel_getUrls(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_setLinksClickable(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_getAutoLinkMask(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_getLinkVisitedTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_getLinksClickable(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_setAutoLinkMask(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_getLinkTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_appendText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CARichLabel_CARichLabel(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACell_class;
extern JSObject *jsb_CrossApp_CACell_prototype;

bool js_crossapp_CACell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACell_getContentView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACell_CACell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListViewDataSource_class;
extern JSObject *jsb_CrossApp_CAListViewDataSource_prototype;

bool js_crossapp_CAListViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAListViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAListViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAListViewDataSource_listViewCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListViewDataSource_numberOfIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListViewDataSource_listViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListViewDataSource_listViewHeightForIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListView_class;
extern JSObject *jsb_CrossApp_CAListView_prototype;

bool js_crossapp_CAListView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAListView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAListView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAListView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_displayingListCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setListFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_getListFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_cellForRowAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_setUnSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListView_CAListView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListViewCell_class;
extern JSObject *jsb_CrossApp_CAListViewCell_prototype;

bool js_crossapp_CAListViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAListViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAListViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAListViewCell_getIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAListViewCell_CAListViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableViewDataSource_class;
extern JSObject *jsb_CrossApp_CATableViewDataSource_prototype;

bool js_crossapp_CATableViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATableViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATableViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATableViewDataSource_tableViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewDataSource_tableViewHeightForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewDataSource_tableCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewDataSource_numberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewDataSource_tableViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewDataSource_tableViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableView_class;
extern JSObject *jsb_CrossApp_CATableView_prototype;

bool js_crossapp_CATableView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATableView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATableView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATableView_getTableFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSectionFooterHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getRowHeightInSectionInRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSectionHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_displayingTableCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setTableFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getNumberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getSectionHeaderHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_getTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableView_CATableView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableViewCell_class;
extern JSObject *jsb_CrossApp_CATableViewCell_prototype;

bool js_crossapp_CATableViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATableViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATableViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATableViewCell_setDraggingLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_getDraggingLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATableViewCell_CATableViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionViewDataSource_class;
extern JSObject *jsb_CrossApp_CACollectionViewDataSource_prototype;

bool js_crossapp_CACollectionViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACollectionViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACollectionViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACollectionViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_collectionViewHeightForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_collectionViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_collectionViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_collectionViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_numberOfItemsInRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_numberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_collectionViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_collectionViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewDataSource_collectionCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionView_class;
extern JSObject *jsb_CrossApp_CACollectionView_prototype;

bool js_crossapp_CACollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACollectionView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACollectionView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getVertInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getHoriInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_clearData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setHoriInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setVertInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionView_CACollectionView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionViewCell_class;
extern JSObject *jsb_CrossApp_CACollectionViewCell_prototype;

bool js_crossapp_CACollectionViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CACollectionViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CACollectionViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CACollectionViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CACollectionViewCell_CACollectionViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoCollectionViewDataSource_class;
extern JSObject *jsb_CrossApp_CAAutoCollectionViewDataSource_prototype;

bool js_crossapp_CAAutoCollectionViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAutoCollectionViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAutoCollectionViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAutoCollectionViewDataSource_numberOfItemsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_collectionViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_collectionViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_collectionViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_collectionViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_collectionViewSizeForItemAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_collectionViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionViewDataSource_collectionCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoCollectionView_class;
extern JSObject *jsb_CrossApp_CAAutoCollectionView_prototype;

bool js_crossapp_CAAutoCollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAutoCollectionView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAutoCollectionView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAutoCollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getVertMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setVertMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setHoriMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_setVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_getHoriMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAutoCollectionView_CAAutoCollectionView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallViewDataSource_class;
extern JSObject *jsb_CrossApp_CAWaterfallViewDataSource_prototype;

bool js_crossapp_CAWaterfallViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWaterfallViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWaterfallViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWaterfallViewDataSource_waterfallViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewDataSource_waterfallViewSectionViewForHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewDataSource_waterfallViewHeightForItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewDataSource_numberOfItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewDataSource_waterfallCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewDataSource_waterfallViewHeightForFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewDataSource_waterfallViewSectionViewForFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewDataSource_waterfallViewHeightForHeader(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallView_class;
extern JSObject *jsb_CrossApp_CAWaterfallView_prototype;

bool js_crossapp_CAWaterfallView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWaterfallView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWaterfallView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWaterfallView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setColumnMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getColumnCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setColumnCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getHighlightWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getColumnMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setItemMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_displayingWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getItemMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_getWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallView_CAWaterfallView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallViewCell_class;
extern JSObject *jsb_CrossApp_CAWaterfallViewCell_prototype;

bool js_crossapp_CAWaterfallViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWaterfallViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWaterfallViewCell(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWaterfallViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWaterfallViewCell_CAWaterfallViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_FileUtils_class;
extern JSObject *jsb_CrossApp_FileUtils_prototype;

bool js_crossapp_FileUtils_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_FileUtils_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_FileUtils(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_FileUtils_writeDataToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_removeFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_purgeCachedEntries(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isAbsolutePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_renameFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isPopupNotify(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_removeDirectory(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_writeStringToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileDataFromZip(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_addSearchPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isFileExist(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_fullPathForFilename(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_fullPathFromRelativeFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getFileExtension(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_setPopupNotify(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_isDirectoryExist(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_setDefaultResourceRootPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_createDirectory(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_loadFilenameLookupDictionaryFromFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getWritablePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_destroyInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_FileUtils_getInstance(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWebView_class;
extern JSObject *jsb_CrossApp_CAWebView_prototype;

bool js_crossapp_CAWebView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAWebView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAWebView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAWebView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_canGoBack(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_loadHTMLString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_reload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_goForward(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_goBack(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setScalesPageToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_getWebViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_showNativeWeb(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_loadFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_loadURL(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_evaluateJS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_showLoadingActivity(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setJavascriptInterfaceScheme(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setActivityView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_stopLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_getHTMLSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_canGoForward(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_hideNativeWebAndShowImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAWebView_CAWebView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAClippingView_class;
extern JSObject *jsb_CrossApp_CAClippingView_prototype;

bool js_crossapp_CAClippingView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAClippingView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAClippingView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAClippingView_isClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setInverted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_getAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_getStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_setAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_isInverted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAClippingView_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAlertView_class;
extern JSObject *jsb_CrossApp_CAAlertView_prototype;

bool js_crossapp_CAAlertView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAAlertView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAAlertView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAAlertView_setAlertMessage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_hide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_show(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_addButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_setMessageFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_hideWithDisplayed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAAlertView_CAAlertView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPickerViewDataSource_class;
extern JSObject *jsb_CrossApp_CAPickerViewDataSource_prototype;

bool js_crossapp_CAPickerViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPickerViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPickerViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPickerViewDataSource_numberOfComponentsInPickerView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerViewDataSource_numberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerViewDataSource_viewForSelect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerViewDataSource_viewForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerViewDataSource_widthForComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerViewDataSource_titleForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerViewDataSource_rowHeightForComponent(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPickerView_class;
extern JSObject *jsb_CrossApp_CAPickerView_prototype;

bool js_crossapp_CAPickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAPickerView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAPickerView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAPickerView_setFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getPickerViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_reloadAllComponents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getPickerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_reloadComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_numberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getSeparateColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_selectRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_numberOfComponents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_rowSizeForComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_selectedRowInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setSeparateColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_getFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_viewForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_setFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAPickerView_CAPickerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADatePickerView_class;
extern JSObject *jsb_CrossApp_CADatePickerView_prototype;

bool js_crossapp_CADatePickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADatePickerView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADatePickerView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADatePickerView_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_setDate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADatePickerView_CADatePickerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADrawView_class;
extern JSObject *jsb_CrossApp_CADrawView_prototype;

bool js_crossapp_CADrawView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CADrawView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CADrawView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CADrawView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawPolygon(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawDot(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_drawSegment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_listenBackToForeground(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CADrawView_CADrawView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAHttpResponse_class;
extern JSObject *jsb_CrossApp_CAHttpResponse_prototype;

bool js_crossapp_CAHttpResponse_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAHttpResponse_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAHttpResponse(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAHttpResponse_getRequest(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setErrorBuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getErrorBuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_isSucceed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getResponseCode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getHttpRequest(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setResponseData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_autorelease(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setResponseHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setSucceed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getResponseHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_getResponseData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_setResponseCode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAHttpResponse_CAHttpResponse(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextField_class;
extern JSObject *jsb_CrossApp_CATextField_prototype;

bool js_crossapp_CATextField_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATextField_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATextField(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATextField_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setKeyboardType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getKeyboardType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_isSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getMaxLenght(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setTextFieldAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginImageLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getMarginRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getTextFieldAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMarginImageRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_getMarginLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setMaxLenght(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_setSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_isAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextField_CATextField(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextView_class;
extern JSObject *jsb_CrossApp_CATextView_prototype;

bool js_crossapp_CATextView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CATextView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CATextView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CATextView_setTextViewAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_setTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_getTextViewAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CATextView_CATextView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CocosDenshion_SimpleAudioEngine_class;
extern JSObject *jsb_CocosDenshion_SimpleAudioEngine_prototype;

bool js_crossapp_SimpleAudioEngine_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_SimpleAudioEngine_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_SimpleAudioEngine(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_SimpleAudioEngine_stopAllEffects(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_getEffectsVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_stopEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_getBackgroundMusicVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_willPlayBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_setBackgroundMusicVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_stopBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_pauseBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_isBackgroundMusicPlaying(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_resumeAllEffects(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_pauseAllEffects(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_preloadBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_playBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_playEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_preloadEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_unloadEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_rewindBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_pauseEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_resumeBackgroundMusic(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_setEffectsVolume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_resumeEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_end(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_sharedEngine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_SimpleAudioEngine_SimpleAudioEngine(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_extension_CAVideoPlayerControlView_class;
extern JSObject *jsb_extension_CAVideoPlayerControlView_prototype;

bool js_crossapp_CAVideoPlayerControlView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_crossapp_CAVideoPlayerControlView_finalize(JSContext *cx, JSObject *obj);
void js_register_crossapp_CAVideoPlayerControlView(JSContext *cx, JS::HandleObject global);
void register_all_crossapp(JSContext* cx, JS::HandleObject obj);
bool js_crossapp_CAVideoPlayerControlView_getPlayerControlViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_setShowBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_setUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_setPlayerControlViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_setFullPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_getShowBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_crossapp_CAVideoPlayerControlView_CAVideoPlayerControlView(JSContext *cx, uint32_t argc, jsval *vp);

#endif // __crossapp_h__
